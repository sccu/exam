
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Jul 19 21:30:01 KST 2012
//----------------------------------------------------

package name.sccu.scope;

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Jul 19 21:30:01 KST 2012
  */
public class ScopeCup extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ScopeCup() {super();}

  /** Constructor which sets the default scanner. */
  public ScopeCup(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ScopeCup(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\026\000\002\004\005\000\002\002\004\000\002\005" +
    "\005\000\002\017\002\000\002\010\006\000\002\010\003" +
    "\000\002\006\002\000\002\007\010\000\002\011\003\000" +
    "\002\011\003\000\002\011\002\000\002\013\003\000\002" +
    "\014\004\000\002\014\002\000\002\015\010\000\002\012" +
    "\003\000\002\012\002\000\002\016\004\000\002\016\002" +
    "\000\002\003\004\000\002\002\005\000\002\002\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\044\000\004\013\004\001\002\000\004\014\041\001" +
    "\002\000\004\002\040\001\002\000\010\015\ufffb\016\ufffb" +
    "\020\ufffb\001\002\000\010\015\012\016\013\020\ufff7\001" +
    "\002\000\004\020\014\001\002\000\004\002\001\001\002" +
    "\000\010\014\ufff9\017\ufff9\020\ufff9\001\002\000\010\014" +
    "\ufff8\017\ufff8\020\ufff8\001\002\000\004\014\015\001\002" +
    "\000\004\010\016\001\002\000\014\011\ufff4\014\ufff7\015" +
    "\012\016\013\017\ufff7\001\002\000\004\011\ufff6\001\002" +
    "\000\006\014\ufff1\017\026\001\002\000\004\011\024\001" +
    "\002\000\014\011\ufff4\014\ufff7\015\012\016\013\017\ufff7" +
    "\001\002\000\004\011\ufff5\001\002\000\004\002\ufffa\001" +
    "\002\000\004\014\027\001\002\000\004\014\ufff2\001\002" +
    "\000\004\014\030\001\002\000\006\006\uffef\012\032\001" +
    "\002\000\004\006\037\001\002\000\004\005\033\001\002" +
    "\000\006\004\uffec\006\uffec\001\002\000\006\004\035\006" +
    "\ufff0\001\002\000\004\005\033\001\002\000\006\004\uffed" +
    "\006\uffed\001\002\000\014\011\ufff3\014\ufff3\015\ufff3\016" +
    "\ufff3\017\ufff3\001\002\000\004\002\000\001\002\000\006" +
    "\006\ufffc\007\ufffe\001\002\000\004\006\043\001\002\000" +
    "\010\015\uffff\016\uffff\020\uffff\001\002\000\004\007\045" +
    "\001\002\000\004\014\041\001\002\000\004\006\ufffd\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\044\000\006\004\004\005\005\001\001\000\004\010" +
    "\041\001\001\000\002\001\001\000\004\006\006\001\001" +
    "\000\006\007\010\011\007\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\011\017\013\020\014" +
    "\016\015\021\001\001\000\002\001\001\000\004\012\024" +
    "\001\001\000\002\001\001\000\010\011\017\014\022\015" +
    "\021\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\016" +
    "\030\001\001\000\002\001\001\000\004\002\033\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\002\035\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\017\043\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\045\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ScopeCup$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ScopeCup$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ScopeCup$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ScopeCup$actions {



  private final ScopeCup parser;

  /** Constructor */
  CUP$ScopeCup$actions(ScopeCup parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$ScopeCup$do_action(
    int                        CUP$ScopeCup$act_num,
    java_cup.runtime.lr_parser CUP$ScopeCup$parser,
    java.util.Stack            CUP$ScopeCup$stack,
    int                        CUP$ScopeCup$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ScopeCup$result;

      /* select the action based on the action number */
      switch (CUP$ScopeCup$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expr ::= NUM 
            {
              Double RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ScopeCup$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ScopeCup$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$ScopeCup$stack.peek()).value;
		 RESULT = new Double(n); 
              CUP$ScopeCup$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$ScopeCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScopeCup$stack.peek()), RESULT);
            }
          return CUP$ScopeCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expr ::= expr PLUS expr 
            {
              Double RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ScopeCup$stack.elementAt(CUP$ScopeCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ScopeCup$stack.elementAt(CUP$ScopeCup$top-2)).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$ScopeCup$stack.elementAt(CUP$ScopeCup$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ScopeCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ScopeCup$stack.peek()).right;
		Double e2 = (Double)((java_cup.runtime.Symbol) CUP$ScopeCup$stack.peek()).value;
		 RESULT = new Double(e1.doubleValue() + e2.doubleValue()); 
              CUP$ScopeCup$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$ScopeCup$stack.elementAt(CUP$ScopeCup$top-2)), ((java_cup.runtime.Symbol)CUP$ScopeCup$stack.peek()), RESULT);
            }
          return CUP$ScopeCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // exprlist ::= expr SEMI 
            {
              Double RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ScopeCup$stack.elementAt(CUP$ScopeCup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ScopeCup$stack.elementAt(CUP$ScopeCup$top-1)).right;
		Double e = (Double)((java_cup.runtime.Symbol) CUP$ScopeCup$stack.elementAt(CUP$ScopeCup$top-1)).value;
		 RESULT = e; System.out.println("Result=" + RESULT); 
              CUP$ScopeCup$result = parser.getSymbolFactory().newSymbol("exprlist",1, ((java_cup.runtime.Symbol)CUP$ScopeCup$stack.elementAt(CUP$ScopeCup$top-1)), ((java_cup.runtime.Symbol)CUP$ScopeCup$stack.peek()), RESULT);
            }
          return CUP$ScopeCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // attr_init ::= 
            {
              Object RESULT =null;

              CUP$ScopeCup$result = parser.getSymbolFactory().newSymbol("attr_init",12, ((java_cup.runtime.Symbol)CUP$ScopeCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScopeCup$stack.peek()), RESULT);
            }
          return CUP$ScopeCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // attr_init ::= EQUAL expr 
            {
              Object RESULT =null;

              CUP$ScopeCup$result = parser.getSymbolFactory().newSymbol("attr_init",12, ((java_cup.runtime.Symbol)CUP$ScopeCup$stack.elementAt(CUP$ScopeCup$top-1)), ((java_cup.runtime.Symbol)CUP$ScopeCup$stack.peek()), RESULT);
            }
          return CUP$ScopeCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // staticness ::= 
            {
              Object RESULT =null;

              CUP$ScopeCup$result = parser.getSymbolFactory().newSymbol("staticness",8, ((java_cup.runtime.Symbol)CUP$ScopeCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScopeCup$stack.peek()), RESULT);
            }
          return CUP$ScopeCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // staticness ::= STATIC 
            {
              Object RESULT =null;

              CUP$ScopeCup$result = parser.getSymbolFactory().newSymbol("staticness",8, ((java_cup.runtime.Symbol)CUP$ScopeCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScopeCup$stack.peek()), RESULT);
            }
          return CUP$ScopeCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // attr_decl ::= visibility staticness ID ID attr_init SEMI 
            {
              Object RESULT =null;

              CUP$ScopeCup$result = parser.getSymbolFactory().newSymbol("attr_decl",11, ((java_cup.runtime.Symbol)CUP$ScopeCup$stack.elementAt(CUP$ScopeCup$top-5)), ((java_cup.runtime.Symbol)CUP$ScopeCup$stack.peek()), RESULT);
            }
          return CUP$ScopeCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // attr_decls ::= 
            {
              Object RESULT =null;

              CUP$ScopeCup$result = parser.getSymbolFactory().newSymbol("attr_decls",10, ((java_cup.runtime.Symbol)CUP$ScopeCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScopeCup$stack.peek()), RESULT);
            }
          return CUP$ScopeCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // attr_decls ::= attr_decl attr_decls 
            {
              Object RESULT =null;

              CUP$ScopeCup$result = parser.getSymbolFactory().newSymbol("attr_decls",10, ((java_cup.runtime.Symbol)CUP$ScopeCup$stack.elementAt(CUP$ScopeCup$top-1)), ((java_cup.runtime.Symbol)CUP$ScopeCup$stack.peek()), RESULT);
            }
          return CUP$ScopeCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // class_body ::= attr_decls 
            {
              Object RESULT =null;

              CUP$ScopeCup$result = parser.getSymbolFactory().newSymbol("class_body",9, ((java_cup.runtime.Symbol)CUP$ScopeCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScopeCup$stack.peek()), RESULT);
            }
          return CUP$ScopeCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // visibility ::= 
            {
              Object RESULT =null;

              CUP$ScopeCup$result = parser.getSymbolFactory().newSymbol("visibility",7, ((java_cup.runtime.Symbol)CUP$ScopeCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScopeCup$stack.peek()), RESULT);
            }
          return CUP$ScopeCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // visibility ::= PRIVATE 
            {
              Object RESULT =null;

              CUP$ScopeCup$result = parser.getSymbolFactory().newSymbol("visibility",7, ((java_cup.runtime.Symbol)CUP$ScopeCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScopeCup$stack.peek()), RESULT);
            }
          return CUP$ScopeCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // visibility ::= PUBLIC 
            {
              Object RESULT =null;

              CUP$ScopeCup$result = parser.getSymbolFactory().newSymbol("visibility",7, ((java_cup.runtime.Symbol)CUP$ScopeCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScopeCup$stack.peek()), RESULT);
            }
          return CUP$ScopeCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // class_decl ::= visibility CLASS ID LBRACE class_body RBRACE 
            {
              String RESULT =null;

              CUP$ScopeCup$result = parser.getSymbolFactory().newSymbol("class_decl",5, ((java_cup.runtime.Symbol)CUP$ScopeCup$stack.elementAt(CUP$ScopeCup$top-5)), ((java_cup.runtime.Symbol)CUP$ScopeCup$stack.peek()), RESULT);
            }
          return CUP$ScopeCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // import_list ::= 
            {
              String RESULT =null;

              CUP$ScopeCup$result = parser.getSymbolFactory().newSymbol("import_list",4, ((java_cup.runtime.Symbol)CUP$ScopeCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScopeCup$stack.peek()), RESULT);
            }
          return CUP$ScopeCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // pkg_name ::= ID 
            {
              Object RESULT =null;

              CUP$ScopeCup$result = parser.getSymbolFactory().newSymbol("pkg_name",6, ((java_cup.runtime.Symbol)CUP$ScopeCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScopeCup$stack.peek()), RESULT);
            }
          return CUP$ScopeCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // pkg_name ::= ID NT$0 DOT pkg_name 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ScopeCup$stack.elementAt(CUP$ScopeCup$top-2)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$ScopeCup$stack.elementAt(CUP$ScopeCup$top-3)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$ScopeCup$stack.elementAt(CUP$ScopeCup$top-3)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$ScopeCup$stack.elementAt(CUP$ScopeCup$top-3)).value;

              CUP$ScopeCup$result = parser.getSymbolFactory().newSymbol("pkg_name",6, ((java_cup.runtime.Symbol)CUP$ScopeCup$stack.elementAt(CUP$ScopeCup$top-3)), ((java_cup.runtime.Symbol)CUP$ScopeCup$stack.peek()), RESULT);
            }
          return CUP$ScopeCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$0 ::= 
            {
              Object RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$ScopeCup$stack.peek()).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$ScopeCup$stack.peek()).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$ScopeCup$stack.peek()).value;
 System.out.println(id1); 
              CUP$ScopeCup$result = parser.getSymbolFactory().newSymbol("NT$0",13, ((java_cup.runtime.Symbol)CUP$ScopeCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScopeCup$stack.peek()), RESULT);
            }
          return CUP$ScopeCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // pkg_decl ::= PKG pkg_name SEMI 
            {
              String RESULT =null;

              CUP$ScopeCup$result = parser.getSymbolFactory().newSymbol("pkg_decl",3, ((java_cup.runtime.Symbol)CUP$ScopeCup$stack.elementAt(CUP$ScopeCup$top-2)), ((java_cup.runtime.Symbol)CUP$ScopeCup$stack.peek()), RESULT);
            }
          return CUP$ScopeCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= java_code EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ScopeCup$stack.elementAt(CUP$ScopeCup$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ScopeCup$stack.elementAt(CUP$ScopeCup$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$ScopeCup$stack.elementAt(CUP$ScopeCup$top-1)).value;
		RESULT = start_val;
              CUP$ScopeCup$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ScopeCup$stack.elementAt(CUP$ScopeCup$top-1)), ((java_cup.runtime.Symbol)CUP$ScopeCup$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ScopeCup$parser.done_parsing();
          return CUP$ScopeCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // java_code ::= pkg_decl import_list class_decl 
            {
              String RESULT =null;

              CUP$ScopeCup$result = parser.getSymbolFactory().newSymbol("java_code",2, ((java_cup.runtime.Symbol)CUP$ScopeCup$stack.elementAt(CUP$ScopeCup$top-2)), ((java_cup.runtime.Symbol)CUP$ScopeCup$stack.peek()), RESULT);
            }
          return CUP$ScopeCup$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

